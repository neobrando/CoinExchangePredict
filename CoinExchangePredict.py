# -*- coding: utf-8 -*-
"""IA_Modelo NoFINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15c1toeTly_Xafc1CZwvrhoUNwDIbWZUN
"""

simport pandas as pd
import numpy as np
from statsmodels.tsa.arima.model import ARIMA

# Step 1: Import necessary libraries

# Step 2: Load the dataset
data = pd.read_csv('datos.csv')

# Step 3: Preprocess the data
data['Year'] = pd.to_datetime(data['Year'])  # Convert 'years' column to datetime
data.set_index('Year', inplace=True)  # Set 'years' column as the index

# Step 4: Split the data
train_data = data.iloc[:-12]  # Use all except the last 12 months for training
test_data = data.iloc[-12:]   # Use the last 12 months for testing

# Step 5: Build the ARIMA model
model = ARIMA(train_data['Coin1_GDP'], order=(1, 1, 1))  # Example order, you may need to adjust it
model_fit = model.fit()

# Step 6: Make predictions
predictions = model_fit.predict(start=len(train_data), end=len(train_data) + len(test_data) - 1)

# Step 7: Evaluate the model
mse = np.mean((predictions - test_data['Coin1_GDP']) ** 2)
print("Mean Squared Error:", mse)

import pandas as pd
import numpy as np
from statsmodels.tsa.arima.model import ARIMA

# Step 1: Import necessary libraries

# Step 2: Load the dataset
data = pd.read_csv('datos.csv')

# Step 3: Preprocess the data
data['Year'] = pd.to_datetime(data['Year'])  # Convert 'years' column to datetime
data.set_index('Year', inplace=True)  # Set 'years' column as the index

# Step 4: Split the data
train_data = data.iloc[:-12]  # Use all except the last 12 months for training
test_data = data.iloc[-12:]   # Use the last 12 months for testing

# Step 5: Clean the data
train_data['Coin1_GDP'] = pd.to_numeric(train_data['Coin1_GDP'], errors='coerce')
train_data = train_data.dropna(subset=['Coin1_GDP'])

# Step 6: Build the ARIMA model
model = ARIMA(train_data['Coin1_GDP'].dropna(), order=(1, 1, 1))  # Example order, you may need to adjust it
model_fit = model.fit()

# Step 7: Make predictions
predictions = model_fit.predict(start=len(train_data), end=len(train_data) + len(test_data) - 1)

# Step 8: Compare the two coins
test_data['Coin1_Predictions'] = predictions
test_data['Coin2_Predictions'] = model_fit.predict(start=len(train_data), end=len(train_data) + len(test_data) - 1, exog=test_data['Coin2_GDP'])

better_coin = np.where(test_data['Coin1_Predictions'] > test_data['Coin2_Predictions'], 'Coin1', 'Coin2')

# Print the predictions and comparison
print("Coin1 Predictions:\n", test_data['Coin1_Predictions'])
print("\nCoin2 Predictions:\n", test_data['Coin2_Predictions'])
print("\nBetter Coin: ", better_coin)

import pandas as pd
import numpy as np
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

# Step 1: Import necessary libraries

# Step 2: Load the dataset
data = pd.read_csv('datos.csv')

# Step 3: Preprocess the data
data['Year'] = pd.to_datetime(data['Year'])  # Convert 'Year' column to datetime
data.set_index('Year', inplace=True)  # Set 'Year' column as the index

# Step 4: Split the data
train_data = data.iloc[:-12]  # Use all except the last 12 months for training
test_data = data.iloc[-12:]   # Use the last 12 months for testing

# Step 5: Clean the data
train_data['Coin1_GDP'] = pd.to_numeric(train_data['Coin1_GDP'], errors='coerce')
train_data = train_data.dropna(subset=['Coin1_GDP'])

# Step 6: Build the ARIMA model
model = ARIMA(train_data['Coin1_GDP'], order=(1, 1, 1))  # Example order, you may need to adjust it
model_fit = model.fit()

# Step 7: Make predictions
predictions = model_fit.predict(start=len(train_data), end=len(train_data) + len(test_data) - 1)

# Step 8: Compare the two coins
test_data['Coin1_Predictions'] = predictions
test_data['Coin2_Predictions'] = model_fit.predict(start=len(train_data), end=len(train_data) + len(test_data) - 1, exog=test_data['Coin2_GDP'])

better_coin = np.where(test_data['Coin1_Predictions'] > test_data['Coin2_Predictions'], 'Coin1', 'Coin2')

# Plot the predictions
plt.plot(test_data.index, test_data['Coin1_Predictions'], label='Coin1 Predictions')
plt.plot(test_data.index, test_data['Coin2_Predictions'], label='Coin2 Predictions')
plt.xlabel('Year')
plt.ylabel('Nominal GDP')
plt.title('Predicted Nominal GDP for Coin1 and Coin2')
plt.legend()
plt.show()